pipeline {
    agent { label 'bpy-agent'}
    environment {
        BASE_URL = 'http://192.8.8.133:8080/'
        PROJECT_ID = 'da0da8be-dc08-4d88-8ed4-97057bfd87f9'
        REPORT_PATH = "./testResult/output.xml"
    }
    stages {
        stage('Setup environment and devices'){
            steps {
                script{
                    common = load "$WORKSPACE/common.groovy"
                    common.stop_appium()
                    common.start_appium()

                    common.kill_all_android_emu()
                    common.start_all_android_emu()
                }
            }
        }
        stage('Assign BPY 02') {
            steps {
                script{
                    echo "Test"
                    sh(script: 'pabot --pabotlib --testlevelsplit --processes 2 --resourcefile ./android_resource_file.dat robot-mobile/test-cases/.', returnStatus: true)
                    archiveArtifacts artifacts: '*.html, *.png, *.xml', fingerprint: true
                    robot outputPath: './'
                    String passed_count =  tm('${ROBOT_PASSED}')
                    String failed_count = tm('${ROBOT_FAILED}')
                    String BRANCH_NAME = "${GIT_BRANCH}"
                    echo "Passed Tests: ${passed_count}"
                    echo "Failed Tests: ${failed_count}"

                    common = load "$WORKSPACE/common.groovy"
                    def total_tests = passed_count.toInteger() + failed_count.toInteger()
                    def log_url = "${env.BASE_URL}/job/${JOB_NAME}/${env.BUILD_NUMBER}/"
                    def message_emoji = common.result_jenkins_emoji(failed_count)
                    
                    slackSend(channel:"#cicd_training_space",message: "BPY [Android]\n ${JOB_NAME} #${env.BUILD_NUMBER} ${message_emoji} \n *BRANCH:* ${BRANCH_NAME} \n Total Test Cases: ${total_tests} \n Passed : ${passed_count} :white_check_mark: \n Failed : ${failed_count} :face_vomiting: \n After: ${currentBuild.durationString} \n (<${log_url}|Report>)")
                    common.notify_line(passed_count, failed_count, log_url, BRANCH_NAME)
                    // common.report_sender()
                }
            }
        post{
            always{
                cleanWs()
                echo "Clear"
                }
            }
            
            }
        }
    }