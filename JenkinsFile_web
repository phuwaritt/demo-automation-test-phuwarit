def notify_line(JOB_NAME, BRANCH_NAME, total_tests, passed_count, failed_count, log_url){
    def token = "lWcrOHVVskzMYRXb7iB1e9xanhcvmC3Pu8Jz39Ozufh"
    def url = 'https://notify-api.line.me/api/notify'
    def message = "BPY ðŸ”¥ \n${JOB_NAME} #${env.BUILD_NUMBER}\nBRANCH: ${BRANCH_NAME} \nBuild #${env.BUILD_NUMBER}\nTotal Test Cases: ${total_tests}\nPassed : ${passed_count} âœ… \nFailed : ${failed_count} ðŸ¤® \nAfter: ${currentBuild.durationString} \n\nReport: (${log_url})"
    sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}'"
}

pipeline {
    agent { label 'bpy-agent'}
    environment {
        BASE_URL = 'http://192.8.8.133:8080/'
    }
    stages {
        stage('Assign BPY 01') {
            steps {
                script{
                sh(script: 'pabot --pabotlib --testlevelsplit --processes 3 -d testResult test-project-web-robotframework/testscripts/tc_shopping_carts_scripts.robot', returnStatus: true)
                archiveArtifacts artifacts: 'testResult/*.html, testResult/*.jpg, testResult/*.png, testResult/*.xml', fingerprint: true, onlyIfSuccessful: false
                robot outputPath: './testResult', otherFiles: '*.png,*.jpg', logFileName: 'log.html', outputFileName: 'output.xml', reportFileName: 'report.html'
                    String passed_count =  tm('${ROBOT_PASSED}')
                    String failed_count = tm('${ROBOT_FAILED}')
                    String BRANCH_NAME = "${GIT_BRANCH}"
                    String JOB_NAME = "${env.JOB_NAME}"
                    String message_eimoj = Null
                    echo "Passed Tests: ${passed_count}"
                    echo "Failed Tests: ${failed_count}"

                    IF (passed_count.toInteger()<0){
                        ${message_eimoj} = :jenkins-masked:
                    }else{
                        ${message_eimoj} = :yuno:
                    }
                    
                    def total_tests = passed_count.toInteger() + failed_count.toInteger()
                    def log_url = "${env.BASE_URL}/job/${JOB_NAME}/${env.BUILD_NUMBER}/"
                    slackSend(channel:"#cicd_training_space",message: "BPY ${message_eimoj} \n ${JOB_NAME} #${env.BUILD_NUMBER} \n *BRANCH:* ${BRANCH_NAME} \n Total Test Cases: ${total_tests} \n Passed : ${passed_count} :white_check_mark: \n Failed : ${failed_count} :face_vomiting: \n After: ${currentBuild.durationString} \n (<${log_url}|Report>)")
                    notify_line(JOB_NAME, BRANCH_NAME, total_tests, passed_count, failed_count, log_url)
                }
            }
        post{
            always{
                cleanWs()
                echo "Clear"
                }
            }
            
            }
        }
    }